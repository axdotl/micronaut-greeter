<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.github.axdotl</groupId>
  <artifactId>micronaut-greeter</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <name>${project.groupId}:${project.artifactId}</name>

  <scm>
    <connection>scm:git:git://github.com/axdotl/micronaut-greeter.git</connection>
    <developerConnection>scm:git:git@github.com:axdotl/micronaut-greeter.git</developerConnection>
    <url>https://github.com/axdotl/micronaut-greeter/tree/master</url>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <version.micronaut>1.3.4</version.micronaut>
    <version.lombok>1.18.12</version.lombok>
    <version.logback>1.2.13</version.logback>
    <version.logback-contrib>0.1.5</version.logback-contrib>
    <version.com.spotify.ile>1.4.10</version.com.spotify.ile>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <maven.compiler.parameters>true</maven.compiler.parameters>

    <dockerfile.contextDirectory>${project.build.directory}</dockerfile.contextDirectory>
    <dockerfile.retryCount>0</dockerfile.retryCount>
    <dockerfile.googleContainerRegistryEnabled>false</dockerfile.googleContainerRegistryEnabled>
    <dockerfile.writeTestMetadata>false</dockerfile.writeTestMetadata>
    <dockerfile.skipDockerInfo>true</dockerfile.skipDockerInfo>
    <dockerfile.repository>axdotl/${project.artifactId}</dockerfile.repository>
    <!-- Automated versioning for docker image, this is our shippable artifact -->
    <dockerfile.tag>${git.commit.time}.${git.commit.id.abbrev}</dockerfile.tag>

  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.micronaut</groupId>
        <artifactId>micronaut-bom</artifactId>
        <version>${version.micronaut}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>

    <!-- Micronaut -->
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-http-server-netty</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-views</artifactId>
    </dependency>

    <!-- Logging -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${version.logback}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback.contrib</groupId>
      <artifactId>logback-jackson</artifactId>
      <version>${version.logback-contrib}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback.contrib</groupId>
      <artifactId>logback-json-classic</artifactId>
      <version>${version.logback-contrib}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jul-to-slf4j</artifactId>
      <!--  reuse version from micronaut -->
      <version>1.7.25</version>
    </dependency>
    <!-- The org.codehaus.janino:commons-compiler:3.0.6 dependency -->
    <!-- will be automatically pulled in by Maven's transitivity rules -->
    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>janino</artifactId>
      <version>3.0.6</version>
    </dependency>

    <!-- Monitoring -->
    <dependency>
      <groupId>io.micronaut.configuration</groupId>
      <artifactId>micronaut-micrometer-registry-prometheus</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-management</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Lazy Developer -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${version.lombok}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>io.micronaut.test</groupId>
      <artifactId>micronaut-test-junit5</artifactId>
      <version>1.1.3</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>1.11.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.micronaut.test</groupId>
      <artifactId>micronaut-test-core</artifactId>
      <version>1.1.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-http-client</artifactId>
      <version>1.3.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>RELEASE</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
          <configuration>
            <annotationProcessorPaths>
              <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${version.lombok}</version>
              </path>
              <path>
                <groupId>io.micronaut</groupId>
                <artifactId>micronaut-inject-java</artifactId>
                <version>${version.micronaut}</version>
              </path>
              <path>
                <groupId>io.micronaut</groupId>
                <artifactId>micronaut-validation</artifactId>
                <version>${version.micronaut}</version>
              </path>
            </annotationProcessorPaths>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.1.0</version>
          <configuration>
            <skip>false</skip>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <executions>
            <execution>
              <id>copy-helm-src</id>
              <phase>process-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.build.directory}/helm/src</outputDirectory>
                <resources>
                  <resource>
                    <directory>src/main/helm</directory>
                    <filtering>true</filtering>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <configuration>
            <skip>true</skip> <!--  we push the image instead  -->
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>2.2.5</version>
        <executions>
          <execution>
            <id>get-the-git-infos</id>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dateFormat>yyyyMMdd-HHmmss</dateFormat><!--  human-readable part of the version number -->
        </configuration>
      </plugin>
      <!-- copy project dependencies -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>download</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeScope>runtime</includeScope>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
              <silent>true</silent>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- configure jar with lib and main class -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>com.github.axdotl.Application</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- copy docker stuff -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/docker</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
              <outputDirectory>${dockerfile.contextDirectory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- package docker stuff -->
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>${version.com.spotify.ile}</version>
        <configuration>
          <serverId>docker-hub</serverId>
          <registryUrl>https://index.docker.io/v1/</registryUrl>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
              <goal>tag</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- create build meta data -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <goals>
              <goal>create-metadata</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}/META-INF</outputDirectory>
              <outputName>build-info.properties</outputName>
              <timezone>UTC</timezone>
              <applicationName>${project.artifactId}</applicationName>
              <applicationPropertyName>serviceName</applicationPropertyName>
              <versionPropertyName>serviceVersion</versionPropertyName>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Helm stuff -->
      <plugin>
        <groupId>com.kiwigrid</groupId>
        <artifactId>helm-maven-plugin</artifactId>
        <version>5.4</version>
        <configuration>
          <chartDirectory>${project.basedir}</chartDirectory>
          <chartVersion>${project.version}</chartVersion>
          <helmDownloadUrl>https://get.helm.sh/helm-v3.2.0-linux-amd64.tar.gz</helmDownloadUrl>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>init</goal>
              <goal>lint</goal>
              <goal>package</goal>
            </goals>

          </execution>
        </executions>
      </plugin>

      <!-- fail if pom is dirty -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>tidy-maven-plugin</artifactId>
        <version>1.1.0</version>
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>
